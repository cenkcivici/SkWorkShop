package com.sk.domain.dao;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.equalTo;import static org.hamcrest.Matchers.hasItem;import static org.hamcrest.Matchers.hasItems;import static org.hamcrest.Matchers.not;import java.util.List;import org.junit.Test;import org.springframework.beans.factory.annotation.Autowired;import com.sk.domain.Category;import com.sk.domain.Photo;import com.sk.domain.Product;import com.sk.util.BaseIntegration;import com.sk.util.builder.CategoryBuilder;import com.sk.util.builder.PhotoBuilder;import com.sk.util.builder.ProductBuilder;public class ProductDaoTest extends BaseIntegration {	@Autowired	private ProductDao productDao;	@Test	public void shouldPersistProduct() {		Category category = new CategoryBuilder().persist(getSession());		Photo photo = new PhotoBuilder().fileName("photo1.png").build();		Product product = new ProductBuilder().title("ps3").url("url").description("PlayStation 3").price(300d).category(category).photos(photo).featured(true).build();		Product persisted = productDao.persist(product);		flushAndClear();		Product fromDb = (Product) getSession().get(Product.class, persisted.getId());		assertThat(fromDb.getCategory(), equalTo(category));		assertThat(fromDb.getTitle(), equalTo("ps3"));		assertThat(fromDb.getUrl(), equalTo("url"));		assertThat(fromDb.getDescription(), equalTo("PlayStation 3"));		assertThat(fromDb.getPrice(), equalTo(300d));		assertThat(fromDb.getPhotos().size(), equalTo(1));		assertThat(fromDb.getPhotos().get(0).getFileName(), equalTo("photo1.png"));		assertThat(fromDb.isFeatured(), equalTo(true));	}	@Test	public void shouldFindByFeatured() {		Category category = new CategoryBuilder().persist(getSession());		Product featured = new ProductBuilder().price(300d).category(category).featured(true).build();		Product notFeatured = new ProductBuilder().category(category).featured(false).build();		featured = productDao.persist(featured);		notFeatured = productDao.persist(notFeatured);		flushAndClear();		List<Product> featuredProducts = productDao.findByFeatured(true);		assertThat(featuredProducts, hasItem(featured));		assertThat(featuredProducts, not(hasItem(notFeatured)));	}	@Test	public void shouldFindProductsInACategory() {		Category category = new CategoryBuilder().persist(getSession());		Product productA = new ProductBuilder().category(category).persist(getSession());		Product productB = new ProductBuilder().category(category).persist(getSession());		flushAndClear();		List<Product> foundProducts = productDao.findByCategory(category);		assertThat(foundProducts, hasItems(productA, productB));	}	@Test	public void shouldFindProductByUrl() {		Category category = new CategoryBuilder().persist(getSession());		Product productA = new ProductBuilder().url("url").category(category).persist(getSession());		flushAndClear();		Product foundProduct = productDao.findByUrl("url");		assertThat(foundProduct, equalTo(productA));	}}