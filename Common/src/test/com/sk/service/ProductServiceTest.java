package com.sk.service;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.equalTo;import static org.hamcrest.Matchers.sameInstance;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;import java.util.ArrayList;import java.util.List;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.Mock;import org.mockito.runners.MockitoJUnitRunner;import com.sk.domain.Product;import com.sk.domain.dao.ProductDao;import com.sk.util.builder.ProductBuilder;@RunWith(MockitoJUnitRunner.class)public class ProductServiceTest {	@Mock	private ProductDao productDao;	private ProductService productService;		@Mock	private UrlGeneratorService urlGeneratorService;	@Before	public void init() {		productService = new ProductService(productDao,urlGeneratorService);	}	@Test	public void shouldPersist() {		Product product = new ProductBuilder().build();		productService.save(product);		verify(productDao).persist(product);	}	@Test	public void shouldDelete() {		Product product = new ProductBuilder().build();		productService.delete(product);		verify(productDao).delete(product);	}	@Test	public void shouldGetAllProductsFromDao() {		List<Product> products = new ArrayList<Product>();		products.add(new ProductBuilder().build());		when(productDao.getAll()).thenReturn(products);		List<Product> fromService = productService.getAll();		assertThat(fromService.size(), equalTo(1));	}		@Test	public void shouldGetAllFeaturedProducts() {		List<Product> products = new ArrayList<Product>();		products.add(new ProductBuilder().build());		when(productDao.findByFeatured(true)).thenReturn(products);		List<Product> fromService = productService.getFeaturedProducts();		assertThat(fromService.size(), equalTo(1));		assertThat(fromService, sameInstance(products));	}		@Test	public void shouldGenerateUrlFromTitle() {		Product product = new ProductBuilder().title("title").build();				when(urlGeneratorService.generateUrlFrom("title")).thenReturn("url");				productService.createURLFromTitle(product);				assertThat(product.getUrl(), equalTo("url"));	}}