package com.sk.service.payment.garanti;import java.io.IOException;import javax.xml.parsers.ParserConfigurationException;import javax.xml.parsers.SAXParser;import javax.xml.parsers.SAXParserFactory;import org.apache.http.HttpStatus;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.Mock;import org.mockito.runners.MockitoJUnitRunner;import org.xml.sax.SAXException;import com.sk.service.payment.ResponseStatus;import com.sk.service.payment.VPOSResponse;import com.sk.util.http.HttpResult;import static org.mockito.Mockito.when;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.equalTo;@RunWith(MockitoJUnitRunner.class)public class GarantiVPOSResponseHandlerTest {	@Mock	private SAXParserFactory factory;	@Mock	private SAXParser parser;	@Mock	private HttpResult result;	private GarantiVPOSResponseHandler handler;	@Before	public void init() {		handler = new GarantiVPOSResponseHandler();		handler.setFactory(factory);	}	@Test	public void shouldReturnSuccessIfResponseHasNoErrors() throws ParserConfigurationException, SAXException, IOException {		when(factory.newSAXParser()).thenReturn(parser);		when(result.getHttpStatus()).thenReturn(HttpStatus.SC_OK);		when(result.getContentAsByteArray()).thenReturn("some content".getBytes());		VPOSResponse response = handler.handle(result);		assertThat(response.getStatus(), equalTo(ResponseStatus.SUCCESS));	}	@Test	public void shouldHandleReturnConnectionProblemIfResponseIsNotOK() {		when(result.getHttpStatus()).thenReturn(HttpStatus.SC_NOT_FOUND);		VPOSResponse response = handler.handle(result);		assertThat(response.getStatus(), equalTo(ResponseStatus.CONNECTION_PROBLEM));	}}