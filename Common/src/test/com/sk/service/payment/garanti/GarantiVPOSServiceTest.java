package com.sk.service.payment.garanti;import java.io.IOException;import org.apache.http.client.ClientProtocolException;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.Mock;import org.mockito.runners.MockitoJUnitRunner;import com.sk.domain.Order;import com.sk.service.payment.ResponseStatus;import com.sk.service.payment.VPOSResponse;import com.sk.util.builder.OrderBuilder;import com.sk.util.builder.ShoppingCartBuilder;import com.sk.util.http.HttpConnection;import com.sk.util.http.HttpResult;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.equalTo;@RunWith(MockitoJUnitRunner.class)public class GarantiVPOSServiceTest {	private GarantiVPOSService vposService;	@Mock	private GarantiRequestFactory requestFactory;	@Mock	private GarantiVPOSResponseHandler garantiVPOSResponseHandler;	@Mock	private HttpConnection connection;	@Mock	private HttpResult httpResult;	@Before	public void init() {		vposService = new GarantiVPOSService();		vposService.setGarantiVPOSResponseHandler(garantiVPOSResponseHandler);		vposService.setRequestFactory(requestFactory);	}	@Test	public void shouldMakeRefundReturnVPOSResponse() throws ClientProtocolException, IOException {		Order order = new OrderBuilder().shoppingCart(new ShoppingCartBuilder().build()).build();				when(requestFactory.createRefundRequest(order)).thenReturn(connection);		when(connection.execute()).thenReturn(httpResult);		when(garantiVPOSResponseHandler.handle(httpResult)).thenReturn(new VPOSResponse(ResponseStatus.SUCCESS));		VPOSResponse response = vposService.refundOrder(order);		verify(requestFactory).createRefundRequest(order);		assertThat(response.getStatus(), equalTo(ResponseStatus.SUCCESS));	}		@Test	public void shouldMakePaymentReturnVPOSResponse() throws ClientProtocolException, IOException {		Order order = new OrderBuilder().shoppingCart(new ShoppingCartBuilder().build()).build();				when(requestFactory.createPaymentRequest(order)).thenReturn(connection);		when(connection.execute()).thenReturn(httpResult);		when(garantiVPOSResponseHandler.handle(httpResult)).thenReturn(new VPOSResponse(ResponseStatus.SUCCESS));				VPOSResponse response = vposService.makePayment(order);				verify(requestFactory).createPaymentRequest(order);		assertThat(response.getStatus(), equalTo(ResponseStatus.SUCCESS));	}		@Test	public void shouldMakePaymentReturnConnectionProblemResponseIfThereIsAnClientProtocolException() throws ClientProtocolException, IOException{		Order order = new OrderBuilder().shoppingCart(new ShoppingCartBuilder().build()).build();		when(requestFactory.createPaymentRequest(order)).thenReturn(connection);		when(connection.execute()).thenThrow(new ClientProtocolException());				VPOSResponse response = vposService.makePayment(order);				assertThat(response.getStatus(), equalTo(ResponseStatus.CONNECTION_PROBLEM));	}		@Test	public void shouldMakePaymentReturnConnectionProblemResponseIfThereIsAnIOException() throws ClientProtocolException, IOException{		Order order = new OrderBuilder().shoppingCart(new ShoppingCartBuilder().build()).build();		when(requestFactory.createPaymentRequest(order)).thenReturn(connection);		when(connection.execute()).thenThrow(new IOException());				VPOSResponse response = vposService.makePayment(order);				assertThat(response.getStatus(), equalTo(ResponseStatus.CONNECTION_PROBLEM));	}}