package com.sk.service.payment.garanti;import java.io.ByteArrayInputStream;import java.io.IOException;import java.io.InputStream;import javax.xml.parsers.ParserConfigurationException;import javax.xml.parsers.SAXParser;import javax.xml.parsers.SAXParserFactory;import org.apache.http.HttpStatus;import org.springframework.stereotype.Component;import org.xml.sax.SAXException;import com.sk.service.exception.ServiceException;import com.sk.service.payment.ResponseStatus;import com.sk.service.payment.VPOSResponse;import com.sk.util.http.HttpResult;@Componentpublic class GarantiVPOSResponseHandler {	private SAXParserFactory factory = SAXParserFactory.newInstance();	public VPOSResponse handle(HttpResult result) {		if (result.getHttpStatus() == HttpStatus.SC_OK) {			try {				SAXParser parser = getSAXParser();				GarantiResponseHandler response = new GarantiResponseHandler();				InputStream inputStream = new ByteArrayInputStream(result.getContentAsByteArray());				parser.parse(inputStream, response);				if (response.hasError()) {					return new VPOSResponse(response.getErrorMsg(), response.getSystemErrorMsg(), ResponseStatus.FAILURE);				} else {					return new VPOSResponse(ResponseStatus.SUCCESS);				}			} catch (SAXException e) {				return notValidResponse();			} catch (IOException e) {				return notValidResponse();			}		} else { // cannot have the valid response			return new VPOSResponse(ResponseStatus.CONNECTION_PROBLEM);		}	}	private SAXParser getSAXParser() {		try {			return factory.newSAXParser();		} catch (ParserConfigurationException e) {			throw new ServiceException(e);		} catch (SAXException e) {			throw new ServiceException(e);		}	}	private VPOSResponse notValidResponse() {		return new VPOSResponse(ResponseStatus.NOT_VALID_RESPONSE);	}	public void setFactory(SAXParserFactory factory) {		this.factory = factory;	}}