package com.sk.service.payment.garanti;import java.io.IOException;import java.net.UnknownHostException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import com.sk.domain.Order;import com.sk.service.payment.ResponseStatus;import com.sk.service.payment.VPOSResponse;import com.sk.util.http.HttpConnection;import com.sk.util.http.HttpResult;@Servicepublic class GarantiVPOSService {	@Autowired	private GarantiRequestFactory requestFactory;	@Autowired	private GarantiVPOSResponseHandler garantiVPOSResponseHandler;	@Value("${vpos.garanti.simulation}")	private Boolean simulation = false;	public VPOSResponse queryBonus(String creditCardNumber) {//		waiting for garanti...		return new VPOSResponse("10.5","10.5",ResponseStatus.SUCCESS);	}		public VPOSResponse refundOrder(Order order) {		HttpConnection connection = requestFactory.createRefundRequest(order);		return executeRequest(connection);	}	public VPOSResponse makePayment(Order order) {		HttpConnection connection = requestFactory.createPaymentRequest(order);		return executeRequest(connection);	}	private VPOSResponse executeRequest(HttpConnection connection) {		if (simulation) {			System.out.println("simulate vpos connection....");			return new VPOSResponse(ResponseStatus.SUCCESS);		} else {			try {				HttpResult result = connection.execute();				return garantiVPOSResponseHandler.handle(result);			} catch (UnknownHostException e) {				return new VPOSResponse(ResponseStatus.UNKNOWN_HOST_PROBLEM);			} catch (IOException e) {				return new VPOSResponse(ResponseStatus.CONNECTION_PROBLEM);			}		}	}	public void setRequestFactory(GarantiRequestFactory requestFactory) {		this.requestFactory = requestFactory;	}	public void setGarantiVPOSResponseHandler(GarantiVPOSResponseHandler garantiVPOSResponseHandler) {		this.garantiVPOSResponseHandler = garantiVPOSResponseHandler;	}}