package com.sk.service.payment.garanti;import java.util.HashMap;import java.util.Map;import org.apache.commons.lang.RandomStringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import com.sk.domain.CreditCard;import com.sk.domain.CreditCardPaymentMethod;import com.sk.service.template.VelocityHelper;import com.sk.service.util.HashHelper;import com.sk.util.http.HttpConnection;import com.sk.util.http.HttpConnectionFactory;@Componentpublic class GarantiRequestFactory {	@Autowired	private HttpConnectionFactory connectionFactory;		@Autowired	private HashHelper hashHelper;		@Autowired	private VelocityHelper velocityHelper;	private final String path = "garanti/";	@Value("${vpos.garanti.url}")	private String garantiVPOSUrl;		@Value("${not.valid.vpos.garanti.url}")	private String notValidGarantiVPOSUrl;	@Value("${vpos.garanti.merchant.id}")	private String merchantId;	@Value("${vpos.garanti.terminal.id}")	private String terminalId;	@Value("${vpos.garanti.user.id}")	private String userId;	@Value("${vpos.garanti.user.password}")	private String password;	public GarantiRequestFactory() {	}	public GarantiRequestFactory(HttpConnectionFactory connectionFactory, VelocityHelper velocityHelper,HashHelper hashHelper) {		this.connectionFactory = connectionFactory;		this.velocityHelper = velocityHelper;		this.hashHelper = hashHelper;	}		public HttpConnection createPaymentRequest(CreditCardPaymentMethod cardPaymentMethod, Double amount) {		HttpConnection connection;				// for not valid url exceptions.		if(cardPaymentMethod.getCreditCard().getCvc().endsWith("2")){			connection = connectionFactory.createConnection(notValidGarantiVPOSUrl);		}else{			connection = connectionFactory.createConnection(garantiVPOSUrl);		}				String requestEntity = velocityHelper.getProcessed(path + "sales.vm", getDataModel(cardPaymentMethod, amount));		connection.setData(requestEntity);						// for simulating payment and timeout errors 		String cvc = cardPaymentMethod.getCreditCard().getCvc();												if(cvc.endsWith("0")){ // request not approved 			connection.addHeader("hasError","true");		} else if (cvc.endsWith("1")) { // timeout			connection.addHeader("timeoutError", "true");		} else if (cvc.endsWith("4")) { // 404			connection.addHeader("error404", "true");		} else if (cvc.endsWith("5")) { // 500			connection.addHeader("error500", "true");		}		return connection;	}	private Map<String, Object> getDataModel(CreditCardPaymentMethod cardPaymentMethod, Double amount) {		Map<String, Object> dataMap = new HashMap<String, Object>();				Integer formattedAmount = getFormattedAmount(amount);		String orderNo = getOrderNo();				dataMap.put("userId", userId);		dataMap.put("hashData", getHashData(cardPaymentMethod.getCreditCard(),formattedAmount,orderNo));		dataMap.put("terminalId", terminalId);		dataMap.put("merchantId", merchantId);		dataMap.put("orderNo", orderNo);		dataMap.put("card", cardPaymentMethod.getCreditCard());		dataMap.put("amount", formattedAmount);		return dataMap;	}	private String getOrderNo() {		return RandomStringUtils.randomAlphanumeric(30);	}	public Integer getFormattedAmount(Double amount) {		amount = amount * 100;		return amount.intValue();	}	private String getHashData(CreditCard creditCard, Integer formattedAmount, String orderNo) {				String hashedPasswordAndTerminal = hashHelper.hash(password + "000" + terminalId);				// order,terminal,cardnumber,amount,hashed		StringBuilder stringBuilder = new StringBuilder()										.append(orderNo)										.append(terminalId)										.append(creditCard.getCardNumber())										.append(formattedAmount)										.append(hashedPasswordAndTerminal);				return hashHelper.hash(stringBuilder.toString());	}	public void setConnectionFactory(HttpConnectionFactory connectionFactory) {		this.connectionFactory = connectionFactory;	}	public void setGarantiVPOSUrl(String garantiVPOSUrl) {		this.garantiVPOSUrl = garantiVPOSUrl;	}	public void setTerminalId(String terminalId) {		this.terminalId = terminalId;	}}