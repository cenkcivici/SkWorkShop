package com.sk.service.payment.garanti;import java.util.HashMap;import java.util.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import com.sk.domain.CreditCard;import com.sk.domain.CreditCardPaymentMethod;import com.sk.domain.Order;import com.sk.service.template.VelocityHelper;import com.sk.service.util.HashHelper;import com.sk.util.http.HttpConnection;import com.sk.util.http.HttpConnectionFactory;@Componentpublic class GarantiRequestFactory {	@Autowired	private HttpConnectionFactory connectionFactory;	@Autowired	private HashHelper hashHelper;	@Autowired	private VelocityHelper velocityHelper;	private final String path = "garanti/";	@Value("${vpos.garanti.url}")	private String garantiVPOSUrl;	@Value("${vpos.garanti.merchant.id}")	private String merchantId;	@Value("${vpos.garanti.terminal.id}")	private String terminalId;	@Value("${vpos.garanti.user.id}")	private String userId;	@Value("${vpos.garanti.user.password}")	private String password;	public GarantiRequestFactory() {	}	public GarantiRequestFactory(HttpConnectionFactory connectionFactory, VelocityHelper velocityHelper, HashHelper hashHelper) {		this.connectionFactory = connectionFactory;		this.velocityHelper = velocityHelper;		this.hashHelper = hashHelper;	}	public HttpConnection createRefundRequest(Order order) {				String requestEntity = velocityHelper.getProcessed(path + "refund.vm", getRefundDataModel(order));		return createConnectionRequst(requestEntity);	}		public HttpConnection createPaymentRequest(Order order) {		String requestEntity = velocityHelper.getProcessed(path + "sales.vm", getPaymentDataModel(order));		return createConnectionRequst(requestEntity);	}		protected HttpConnection createConnectionRequst(String requestEntity) {		HttpConnection connection = connectionFactory.createConnection(garantiVPOSUrl);		connection.setData(requestEntity);		return connection;	}	private Map<String, Object> getRefundDataModel(Order order) {		Map<String, Object> dataMap = getDataMapWithSecurityParameters(order);		Integer formattedAmount =  getFormattedAmount(order.getTotalAmount());		dataMap.put("hashData", getHashDataRefund(formattedAmount, order.getOrderID()));		dataMap.put("orderNo", order.getOrderID());		dataMap.put("amount", formattedAmount);		return dataMap;	}	private Map<String, Object> getPaymentDataModel(Order order) {		CreditCardPaymentMethod cardPaymentMethod = (CreditCardPaymentMethod) order.getPaymentMethod();		Integer formattedAmount =  getFormattedAmount(order.getTotalAmount());		Map<String, Object> dataMap = getDataMapWithSecurityParameters(order);		dataMap.put("hashData", getHashDataForPayment(cardPaymentMethod.getCreditCard(), formattedAmount, order.getOrderID()));		dataMap.put("card", cardPaymentMethod.getCreditCard());		dataMap.put("orderNo", order.getOrderID());		dataMap.put("amount",formattedAmount);		return dataMap;	}	private Map<String, Object> getDataMapWithSecurityParameters(Order order) {		Map<String, Object> dataMap = new HashMap<String, Object>();		dataMap.put("userId", userId);		dataMap.put("terminalId", terminalId);		dataMap.put("merchantId", merchantId);		return dataMap;	}	public Integer getFormattedAmount(Double amount) {		Double amountWithPercentage = amount * 100;		return amountWithPercentage.intValue();	}	private String getHashDataForPayment(CreditCard creditCard, Integer formattedAmount, String orderNo) {		String hashedPasswordAndTerminal = hashHelper.hash(password + "000" + terminalId);		// order,terminal,cardnumber,amount,hashed		StringBuilder stringBuilder = new StringBuilder().append(orderNo).append(terminalId).append(creditCard.getCardNumber()).append(formattedAmount).append(hashedPasswordAndTerminal);		return hashHelper.hash(stringBuilder.toString());	}		private String getHashDataRefund(Integer formattedAmount, String orderNo) {		String hashedPasswordAndTerminal = hashHelper.hash(password + "000" + terminalId);				// order,terminal,cardnumber,amount,hashed		StringBuilder stringBuilder = new StringBuilder().append(orderNo).append(terminalId).append(formattedAmount).append(hashedPasswordAndTerminal);				return hashHelper.hash(stringBuilder.toString());	}	public void setConnectionFactory(HttpConnectionFactory connectionFactory) {		this.connectionFactory = connectionFactory;	}	public void setGarantiVPOSUrl(String garantiVPOSUrl) {		this.garantiVPOSUrl = garantiVPOSUrl;	}	public void setTerminalId(String terminalId) {		this.terminalId = terminalId;	}}