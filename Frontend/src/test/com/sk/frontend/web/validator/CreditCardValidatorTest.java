package com.sk.frontend.web.validator;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.Mock;import org.mockito.runners.MockitoJUnitRunner;import org.springframework.validation.Errors;import com.sk.domain.CreditCardPaymentMethod;import com.sk.util.builder.CreditCardPaymentMethodBuilder;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.verifyNoMoreInteractions;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.equalTo;@RunWith(MockitoJUnitRunner.class)public class CreditCardValidatorTest {	private CreditCardValidator creditCardValidator;	@Mock	private Errors errors;	@Before	public void init() {		creditCardValidator = new CreditCardValidator();	}	@Test	public void shouldSupportCreditCardClass() {		assertThat(creditCardValidator.supports(CreditCardPaymentMethod.class), equalTo(true));	}	@Test	public void shouldAddErrorIfCreditCardNumberIsEmpty() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().creditCardNumber(null).build();		creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("cardNumber", "creditCard.empty");	}	@Test	public void shouldAddErrorIfCreditCardNumberIsBlank() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().creditCardNumber("        ").build();		creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("cardNumber", "creditCard.empty");	}	@Test	public void shouldAddErrorIfCreditCardNumberIsNotNumeric() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().creditCardNumber("1234567asd123456").build();		creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("cardNumber", "creditCard.numeric");	}	@Test	public void shouldAddErrorIfCreditCardNumberIsNot16Characters() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().creditCardNumber("123456789012345").build();		creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("cardNumber", "creditCard.length");	}	@Test	public void shouldValidateIfCreditCardNumberIsValid() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().creditCardNumber("1234567890123456").build();		creditCardValidator.validate(paymentMethod, errors);		verifyNoMoreInteractions(errors);	}}