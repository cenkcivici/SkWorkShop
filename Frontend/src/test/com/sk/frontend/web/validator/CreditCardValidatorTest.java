package com.sk.frontend.web.validator;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.Mock;import org.mockito.runners.MockitoJUnitRunner;import org.springframework.validation.Errors;import com.sk.domain.CreditCardPaymentMethod;import com.sk.util.builder.CreditCardPaymentMethodBuilder;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.verifyNoMoreInteractions;import static org.hamcrest.MatcherAssert.assertThat;import static org.hamcrest.Matchers.equalTo;@RunWith(MockitoJUnitRunner.class)public class CreditCardValidatorTest {	private CreditCardValidator creditCardValidator;	@Mock	private Errors errors;	@Before	public void init() {		creditCardValidator = new CreditCardValidator();	}	@Test	public void shouldSupportCreditCardClass() {		assertThat(creditCardValidator.supports(CreditCardPaymentMethod.class), equalTo(true));	}	@Test	public void shouldAddErrorIfCreditCardNumberIsEmptyOrBlank() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().creditCardNumber(null).build();		creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("cardNumber", "creditCard.cardNumber.empty");	}	@Test	public void shouldAddErrorIfCreditCardNumberIsBlank() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().creditCardNumber("        ").build();		creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("cardNumber", "creditCard.cardNumber.empty");	}	@Test	public void shouldAddErrorIfCreditCardNumberIsNotNumeric() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().creditCardNumber("1234567asd123456").build();		creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("cardNumber", "creditCard.cardNumber.numeric");	}	@Test	public void shouldAddErrorIfCreditCardNumberIsNot16Characters() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().creditCardNumber("123456789012345").build();		creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("cardNumber", "creditCard.cardNumber.length");	}		@Test	public void shouldAddErrorIfCreditCardNumberIsNotValid() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().creditCardNumber("1234567890123456").build();				creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("cardNumber", "creditCard.cardNumber.not.valid");	}	@Test	public void shouldAddErrorIfOwnerIsEmpty() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().owner(null).build();		creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("owner", "creditCard.owner.empty");	}		@Test	public void shouldAddErrorIfOwnerIsNotAlphebatic() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().owner("some name1").build();				creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("owner", "creditCard.owner.alphabetic");	}	@Test	public void shouldAddErrorIfOwnerIsBlank() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().owner("        ").build();		creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("owner", "creditCard.owner.empty");	}		@Test	public void shouldAddErrorIfCVCIsEmpty() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().cvc(null).build();		creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("cvc", "creditCard.cvc.empty");	}	@Test	public void shouldAddErrorIfCVCIsBlank() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().cvc("        ").build();		creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("cvc", "creditCard.cvc.empty");	}		@Test	public void shouldAddErrorIfCVCIsNotNumeric() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().cvc("1A3").build();				creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("cvc", "creditCard.cvc.numeric");	}		@Test	public void shouldAddErrorIfCVCIsNot3Characters() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().cvc("1234").build();				creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("cvc", "creditCard.cvc.length");	}		@Test	public void shouldAddErrorIfCreditCardTypeIsNull() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().creditCardType(null).build();				creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("creditCardType", "creditCard.creditCardType.empty");	}		@Test	public void shouldAddErrorIfCardMonthIsNull() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().month(null).build();				creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("month", "creditCard.month.empty");	}	@Test	public void shouldAddErrorIfCardMonthIsNotNumeric() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().month("a1").build();				creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("month", "creditCard.month.numeric");	}		@Test	public void shouldAddErrorIfCardMonthIsNotLowerThan1() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().month("00").build();				creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("month", "creditCard.month.not.valid");			}		@Test	public void shouldAddErrorIfCardMonthIsHigherThan12() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().month("13").build();				creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("month", "creditCard.month.not.valid");			}		@Test	public void shouldAddErrorIfCardYearIsNull() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().year(null).build();				creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("year", "creditCard.year.empty");	}		@Test	public void shouldAddErrorIfCardYearIsNotNumeric() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().year("2-12").build();				creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("year", "creditCard.year.numeric");	}			@Test	public void shouldAddErrorIfCardMonthIsNotLowerThanThisYear() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().year("2011").build();				creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("year", "creditCard.year.not.valid");			}	@Test	public void shouldAddErrorIfCardMonthIsNotLowerMoreThis12YearsLater() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().year("2025").build();				creditCardValidator.validate(paymentMethod, errors);		verify(errors).rejectValue("year", "creditCard.year.not.valid");	}		@Test	public void shouldValidateIfCreditCardIsValid() {		CreditCardPaymentMethod paymentMethod = new CreditCardPaymentMethodBuilder().creditCardNumber("4539992043491562").build();		creditCardValidator.validate(paymentMethod, errors);		verifyNoMoreInteractions(errors);	}}