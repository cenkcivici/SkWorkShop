package com.sk.frontend.web.validator;import java.util.Calendar;import org.apache.commons.lang.StringUtils;import org.springframework.validation.Errors;import org.springframework.validation.Validator;import com.sk.domain.CreditCard;import com.sk.domain.CreditCardPaymentMethod;public class CreditCardValidator implements Validator {	@Override	public boolean supports(Class<?> clazz) {		return CreditCardPaymentMethod.class.equals(clazz);	}	@Override	public void validate(Object paymentMethod, Errors errors) {		CreditCardPaymentMethod creditCardPaymentMethod = (CreditCardPaymentMethod) paymentMethod;		CreditCard creditCard = creditCardPaymentMethod.getCreditCard();		validateCardOwner(errors, creditCard);		validateCardType(errors, creditCard);		validateCardNumber(errors, creditCard);		validateCardCVC(errors, creditCard);		validateCardMonth(errors, creditCard);		validateCardYear(errors, creditCard);	}	private void validateCardYear(Errors errors, CreditCard creditCard) {		final String yearStr = "year";		if (StringUtils.isBlank(creditCard.getYear())){			errors.rejectValue(yearStr, "creditCard.year.empty");		} else if (!StringUtils.isNumeric(creditCard.getYear())) {			errors.rejectValue(yearStr, "creditCard.year.numeric");		} else {			Integer month = Integer.parseInt(creditCard.getYear());			if (month < getCurrentYear() || month > getCurrentYear() + 12) {				errors.rejectValue(yearStr, "creditCard.year.not.valid");			}		}	}	private int getCurrentYear() {		return Calendar.getInstance().get(Calendar.YEAR);	}	private void validateCardType(Errors errors, CreditCard creditCard) {		if (creditCard.getCreditCardType() == null){			errors.rejectValue("creditCardType", "creditCard.creditCardType.empty");		}	}	private void validateCardOwner(Errors errors, CreditCard creditCard) {		final String ownerStr = "owner";		if (StringUtils.isBlank(creditCard.getOwner())){			errors.rejectValue(ownerStr, "creditCard.owner.empty");		}else if (!StringUtils.isAlphaSpace(creditCard.getOwner())) {			errors.rejectValue(ownerStr, "creditCard.owner.alphabetic");		}	}	private void validateCardMonth(Errors errors, CreditCard creditCard) {		final String monthStr = "month";		if (StringUtils.isBlank(creditCard.getMonth())){			errors.rejectValue(monthStr, "creditCard.month.empty");		} else if (!StringUtils.isNumeric(creditCard.getMonth())) {			errors.rejectValue(monthStr, "creditCard.month.numeric");		} else {			Integer month = Integer.parseInt(creditCard.getMonth());			if (month < 1 || month > 12) {				errors.rejectValue(monthStr, "creditCard.month.not.valid");			}		}	}	private void validateCardCVC(Errors errors, CreditCard creditCard) {		final String cvcStr = "cvc";		if (StringUtils.isBlank(creditCard.getCvc())){			errors.rejectValue(cvcStr, "creditCard.cvc.empty");		} else {			if (!StringUtils.isNumeric(creditCard.getCvc())) {				errors.rejectValue(cvcStr, "creditCard.cvc.numeric");			} else if (creditCard.getCvc().length() != 3) {				errors.rejectValue(cvcStr, "creditCard.cvc.length");			}		}	}	private void validateCardNumber(Errors errors, CreditCard creditCard) {		final String cardNumberStr = "cardNumber";		if (StringUtils.isBlank(creditCard.getCardNumber())){			errors.rejectValue(cardNumberStr, "creditCard.cardNumber.empty");		} else {			if (!StringUtils.isNumeric(creditCard.getCardNumber())) {				errors.rejectValue(cardNumberStr, "creditCard.cardNumber.numeric");			} else if (creditCard.getCardNumber().length() != 16) {				errors.rejectValue(cardNumberStr, "creditCard.cardNumber.length");			}else{				org.apache.commons.validator.routines.CreditCardValidator validator = new org.apache.commons.validator.routines.CreditCardValidator(org.apache.commons.validator.routines.CreditCardValidator.VISA + org.apache.commons.validator.routines.CreditCardValidator.MASTERCARD);				if( ! validator.isValid(creditCard.getCardNumber())){					errors.rejectValue(cardNumberStr, "creditCard.cardNumber.not.valid");				}			}					}	}}